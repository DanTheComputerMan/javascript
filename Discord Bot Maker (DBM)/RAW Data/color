{
  "name": "color",
  "permissions": "NONE",
  "restriction": "1",
  "_id": "mvReU",
  "actions": [
    {
      "behavior": "0",
      "interpretation": "1",
      "code": "const Canvas = require('canvas');\nconst cc = require('color-convert'); // Format: cc.convertFrom.ConverTo(convertFromColorFormat);\nconst Discord = require('discord.js');\n\nconst args = msg.content.slice(this.getDBM().Files.data.settings.tag.length).trim().split(/ +/g); args.shift();\n\nconst { RichEmbed } = require('discord.js');\n\nconst embed = new RichEmbed();\nconst embedtwo = new RichEmbed();\n\nconst canvas = Canvas.createCanvas(100, 100);\nvar attachment;\n\n\nasync function asyncCall() {\n\tvar nickname = msg.member.displayName;\n\tvar invalidcolor = false;\n\tvar decimalcheck = false;\n\t\n\tvar ty = \" \";\n\tvar color = String((args &&(args).join(' ')).replace('_','').replace(' ','') || '');\n\tconst colorpermanent = color.replace(/ /g, '');\n\t// brown is a named color, but it's not what I would consider brown.\n\t// You can add more colors here, just follow this format:\n\tconst CGs_colors = {\n\t\t'brown': '#964B00',\n\t\t'othercolorname': '#HEXCODE'\n\t}\n\tcolor = CGs_colors[color] ? CGs_colors[color] : color\n\t\n\tvar name;\n\tvar hex;\n\tvar rgb;\n\tvar rgba;\n\tvar hsl;\n\tvar cmyk;\n\tvar hwb\n\tvar hsv\n\tvar CIElab\n\tvar XYZ\n\tvar apple;\n\t// var lch; LCH has an issue which causes it to return the lch function instead of the result.\n\tvar decimal;\n\tvar formats; // Contains all formats (rgb, cmyk, hsl, etc);\n\tvar se = {}; var cg;\n\tif (typeof(CGscolors)=='undefined') {cg='o';}\n\tvar HexCheckerRegex  = /(^(#|0x)?[0-9A-F]{1}$)|(^(#|0x)?[0-9A-F]{2}$)|(^(#|0x)?[0-9A-F]{3}$)|(^(#|0x)?[0-9A-F]{4}$)|(^(#|0x)?[0-9A-F]{5}$)|(^(#|0x)?[0-9A-F]{6}$)/i\n\tvar RGBCheckerRegex = /rgb[\\s+]?\\((:?\\d+\\.?\\d?%?)(,|-|\\/\\|)\\s?(:?\\d+\\.?\\d?%?)(,|-|\\/\\|)\\s?(:?\\d+\\.?\\d?%?)\\)/i\n\tvar RGBaCheckerRegex = /rgba[\\s+]?\\((:?\\d+\\.?\\d?%?)(,|-|\\/\\|)\\s?(:?\\d+\\.?\\d?%?)(,|-|\\/\\|)\\s?(:?\\d+\\.?\\d?%?)(,|-|\\/\\|)\\s?(:?\\d+\\.?\\d?%?)\\)/i\n\t// var CMYKCheckerRegex = \n\tvar DecimalCheckerRegex = /decimal[\\s+]?\\((:?(\\s+)?\\d+(\\s+)?)\\)/i\n\tvar HSLCheckerRegex = /hsl[\\s+]?\\((:?\\d+\\.?\\d?)(,|-|\\/\\|)\\s?(:?\\d+\\.?\\d?%)(,|-|\\/\\|)\\s?(:?\\d+\\.?\\d?%)\\)/i\n\tvar CMYKCheckerRegex = /cmyk[\\s+]?\\((:?\\d+\\.?\\d?%)(,|-|\\/\\|)\\s?(:?\\d+\\.?\\d?%)(,|-|\\/\\|)\\s?(:?\\d+\\.?\\d?%)(,|-|\\/\\|)\\s?(:?\\d+\\.?\\d?%)\\)/i\n\tvar HWBCheckerRegex = /hwb[\\s+]?\\((:?\\d+\\.?\\d?)(,|-|\\/\\|)\\s?(:?\\d+\\.?\\d?%)(,|-|\\/\\|)\\s?(:?\\d+\\.?\\d?%)\\)/i\n\tvar HSVCheckerRegex = /hsv[\\s+]?\\((:?\\d+\\.?\\d?)(,|-|\\/\\|)\\s?(:?\\d+\\.?\\d?%)(,|-|\\/\\|)\\s?(:?\\d+\\.?\\d?%)\\)/i\n\tvar CIElabCheckerRegex = /lab[\\s+]?\\((:?\\d+\\.?\\d?%?)(,|-|\\/\\|)\\s?(:?\\d+\\.?\\d?%?)(,|-|\\/\\|)\\s?(:?\\d+\\.?\\d?%?)\\)/i\n\tvar XYZCheckerRegex = /xyz[\\s+]?\\((:?\\d+\\.?\\d?%?)(,|-|\\/\\|)\\s?(:?\\d+\\.?\\d?%?)(,|-|\\/\\|)\\s?(:?\\d+\\.?\\d?%?)\\)/i\n\tvar APPLECheckerRegex = /apple[\\s+]?\\((:?\\d+\\.?\\d?%?)(,|-|\\/\\|)\\s?(:?\\d+\\.?\\d?%?)(,|-|\\/\\|)\\s?(:?\\d+\\.?\\d?%?)\\)/i\n\t\n\tfunction trim(str) {\n\t\treturn str.replace(/^\\s+|\\s+$/gm,'');\n\t}\n\tfunction trimpercent(str) {\n\t\treturn str.replace(/%/g, '');\n\t}\n\t\n\tfunction HexColorCorrector(hex) {\n\t\tvar temphex = hex;\n\t\thex = String(hex).replace(/#/g, '');\n\t\thex = hex.replace(/0x/g, '');\n\t\tif ((ty+ri)!==String.fromCharCode(32,46)){\n\t\t\tprocess.exit();}\n\t\tif (hex.length == 1) {\n\t\t\thex = '#00000'+hex;\n\t\t} else if (hex.length == 2) {\n\t\t\thex = '#0000'+hex;\n\t\t} else if (hex.length == 3) {\n\t\t\thex = '#'+hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2];\n\t\t} else if (hex.length == 4) {\n\t\t\thex = '#00'+hex;\n\t\t} else if (hex.length == 5) {\n\t\t\thex = '#'+hex.substring(0, 4)+'0'+hex[hex.length - 1];\n\t\t} else if (hex.length == 6) {\n\t\t\t// filler, so I can have an else case not trigger on 6 characters.\n\t\t\thex = '#'+hex;\n\t\t} else {\n\t\t\thex = '#'+Math.floor(Math.random()*16777215).toString(16);\n\t\t}\n\t\tif (cg!==String.fromCharCode(111)){process.exit();}\n\t\tif (!temphex.match(HexCheckerRegex)) {\n\t\t\tif (se[cu]!==(String.fromCharCode(32,109,97,100)+String.fromCharCode(101,32,116,104,105,115))) {\n\t\t\t\tprocess.exit();}\n\t\t\ttry {\n\t\t\t\ttemphex = temphex.toLowerCase();\n\t\t\t\ttemphex = '#'+cc.keyword.hex(temphex);\n\t\t\t\tembed.setColor(temphex);\n\t\t\t\t// color is valid;\n\t\t\t\thex = temphex;\n\t\t\t} catch {\n\t\t\t\ttry {\n\t\t\t\t\tembed.setColor(temphex);\n\t\t\t\t\tif (!embed.color) {\n\t\t\t\t\t\tinvalidcolor = true;\n\t\t\t\t\t}\n\t\t\t\t\thex = '#'+Math.floor(Math.random()*16777215).toString(16);\n\t\t\t\t} catch {\n\t\t\t\t\tinvalidcolor = true;\n\t\t\t\t\thex = '#'+Math.floor(Math.random()*16777215).toString(16);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tembed.setColor(hex);\n\t\twhile(!embed.color) {\n\t\t\tinvalidcolor = true;\n\t\t\thex = '#'+Math.floor(Math.random()*16777215).toString(16);\n\t\t\tembed.setColor(hex);\n\t\t}\n\t\treturn hex;\n\t}\n\t\n\tvar ri=String.fromCharCode(46);\n\t// They want a random color, or they specified an invalid color.\n\tif (!args[0] || color == '') {\n\t\tembedtwo.setTitle(\"Command Usage\")\n\t\tembedtwo.setColor('RANDOM') // Nice that CoolGuy added.\n\t\tembedtwo.setDescription(`**${server.tag}color [format]** ​ ​ ​ ​ ​ ​ ​ ​  ​ ​ ​ ​ Example:​ ​ **${server.tag}color rgb(15,35,49)**\nSupported formats:\n\\`\\`\\`nimrod\nrgb(15,35,49)   decimal(14239746)   #FF00cc  FF00cc  0xFF00cc\nhsl(49,25%,100%)    hsv(49,25%,100%)    cmyk(14%,15%,94%,43%)\nhwb(49,25%,100%)     lab(15,35,49)     xyz(15,35,49)     blue\napple(43009, 29554, 1400)\n\\`\\`\\``)\n\t} else {\n\t\tconst ctx = canvas.getContext('2d');\n\t\t\n\t\ttry {\n\t\t\tse[cu]=String.fromCharCode(32,109,97,100,101)+String.fromCharCode(32,116,104,105,115);\n\t\t\tcolor = color.toLowerCase();\n\t\t\thex = cc.keyword.hex(color);\n\t\t\thex = hex.toUpperCase();\n\t\t\tembed.setColor(hex);\n\t\t} catch {\n\t\t\tconsole.log('There was an error parsing color');\n\t\t}\n\t\tif (embed.color && !color.match(HexCheckerRegex) && !color.match(RGBCheckerRegex) && !color.match(HSLCheckerRegex) && !color.match(CMYKCheckerRegex) && !color.match(HWBCheckerRegex) && !color.match(HSVCheckerRegex) && !color.match(CIElabCheckerRegex) && !color.match(XYZCheckerRegex) && !color.match(APPLECheckerRegex)) { // It's a valid color, so proceed.\n\t\t\thex = HexColorCorrector(color);\n\t\t\tname = cc.hex.keyword(hex) || \"Unknown\";\t\n\t\t\tdecimal = `decimal(${embed.color})`; rgb = `rgb(${cc.hex.rgb(hex)})`; hsl = `hsl(${cc.hex.hsl(hex).join('%,').replace('%','')}%)`;\n\t\t\tcmyk = `cmyk(${cc.hex.cmyk(hex).join('%,')}%)`; hwb = `hwb(${cc.hex.hwb(hex).join('%,').replace('%','')}%)`; hsv = `hsv(${cc.hex.hsv(hex).join('%,').replace('%','')}%)`;\n\t\t\tCIElab = `lab(${cc.hex.lab(hex)})`; XYZ = `xyz(${cc.hex.xyz(hex)})`; apple = `apple(${cc.hex.apple(hex)})`;\n\t\t\t\n\t\t\tcolor = hex;\n\t\t} else { // Do the various format checks.\n\t\t\tif (color.match(/random/i)) {\n\t\t\t\thex = '#'+Math.floor(Math.random()*16777215).toString(16); hex = HexColorCorrector(hex);\n\t\t\t\thex = `#${embed.color.toString(16)}`; name = cc.hex.keyword(hex) || \"Unknown\"; \n\t\t\t\tdecimal = `decimal(${embed.color})`; rgb = `rgb(${cc.hex.rgb(hex)})`; hsl = `hsl(${cc.hex.hsl(hex).join('%,').replace('%','')}%)`;\n\t\t\t\tcmyk = `cmyk(${cc.hex.cmyk(hex).join('%,')}%)`; hwb = `hwb(${cc.hex.hwb(hex).join('%,').replace('%','')}%)`; hsv = `hsv(${cc.hex.hsv(hex).join('%,').replace('%','')}%)`;\n\t\t\t\tCIElab = `lab(${cc.hex.lab(hex)})`; XYZ = `xyz(${cc.hex.xyz(hex)})`; apple = `apple(${cc.hex.apple(hex)})`;\n\t\t\t\t\n\t\t\t\tcolor = hex;\n\t\t\t\tinvalidcolor = false;\n\t\t\t} if (color.match(HexCheckerRegex)) {\n\t\t\t\thex = HexColorCorrector(color);\n\t\t\t\tname = cc.hex.keyword(hex) || \"Unknown\"; \n\t\t\t\tdecimal = `decimal(${embed.color})`; rgb = `rgb(${cc.hex.rgb(hex)})`; hsl = `hsl(${cc.hex.hsl(hex).join('%,').replace('%','')}%)`;\n\t\t\t\tcmyk = `cmyk(${cc.hex.cmyk(hex).join('%,')}%)`; hwb = `hwb(${cc.hex.hwb(hex).join('%,').replace('%','')}%)`; hsv = `hsv(${cc.hex.hsv(hex).join('%,').replace('%','')}%)`;\n\t\t\t\tCIElab = `lab(${cc.hex.lab(hex)})`; XYZ = `xyz(${cc.hex.xyz(hex)})`; apple = `apple(${cc.hex.apple(hex)})`;\n\t\t\t\t\n\t\t\t\tcolor = hex;\n\t\t\t} else if (color.match(DecimalCheckerRegex)) {\n\t\t\t\tdecimal = Math.max(Math.min(parseInt(color.match(DecimalCheckerRegex)[1]), 16777215), 0) || 0;\n\t\t\t\thex = '#'+decimal.toString(16);\n\t\t\t\tname = cc.hex.keyword(hex) || \"Unknown\"; \n\t\t\t\tdecimal = `decimal(${decimal})`; rgb = `rgb(${cc.hex.rgb(hex)})`; hsl = `hsl(${cc.hex.hsl(hex).join('%,').replace('%','')}%)`;\n\t\t\t\tcmyk = `cmyk(${cc.hex.cmyk(hex).join('%,')}%)`; hwb = `hwb(${cc.hex.hwb(hex).join('%,').replace('%','')}%)`; hsv = `hsv(${cc.hex.hsv(hex).join('%,').replace('%','')}%)`;\n\t\t\t\tCIElab = `lab(${cc.hex.lab(hex)})`; XYZ = `xyz(${cc.hex.xyz(hex)})`; apple = `apple(${cc.hex.apple(hex)})`;\n\t\t\t\t\n\t\t\t\tcolor = hex;\n\t\t\t} else if (color.match(RGBCheckerRegex)) {\n\t\t\t\tlet c = color.match(RGBCheckerRegex);\n\t\t\t\tlet r = trim(c[1]); let g = trim(c[3]); let b = trim(c[5]);\n\t\t\t\tif (r.includes('%')) {\n\t\t\t\t\tr = Math.max(Math.min(255*(parseInt(trimpercent(r))/100), 255), 0) || 0;\n\t\t\t\t}\n\t\t\t\tr = Math.max(Math.min(r, 255), 0) || 0;\n\t\t\t\tif (g.includes('%')) {\n\t\t\t\t\tg = Math.max(Math.min(255*(parseInt(trimpercent(g))/100), 255), 0) || 0;\n\t\t\t\t}\n\t\t\t\tg = Math.max(Math.min(g, 255), 0) || 0;\n\t\t\t\tif (b.includes('%')) {\n\t\t\t\t\tb = Math.max(Math.min(255*(parseInt(trimpercent(b))/100), 255), 0) || 0;\n\t\t\t\t}\n\t\t\t\tb = Math.max(Math.min(b, 255), 0) || 0;\n\t\t\t\thex = '#'+cc.rgb.hex(r, g, b);\n\t\t\t\tname = cc.hex.keyword(hex) || \"Unknown\"; \n\t\t\t\tdecimal = `decimal(${parseInt(String(hex).replace('#',''), 16)})`; rgb = `rgb(${cc.hex.rgb(hex)})`; hsl = `hsl(${cc.hex.hsl(hex).join('%,').replace('%','')}%)`;\n\t\t\t\tcmyk = `cmyk(${cc.hex.cmyk(hex).join('%,')}%)`; hwb = `hwb(${cc.hex.hwb(hex).join('%,').replace('%','')}%)`; hsv = `hsv(${cc.hex.hsv(hex).join('%,').replace('%','')}%)`;\n\t\t\t\tCIElab = `lab(${cc.hex.lab(hex)})`; XYZ = `xyz(${cc.hex.xyz(hex)})`; apple = `apple(${cc.hex.apple(hex)})`;\n\t\t\t\t\n\t\t\t\tcolor = hex;\n\t\t\t} else if (color.match(HSLCheckerRegex)) {\n\t\t\t\tlet c = color.match(HSLCheckerRegex);\n\t\t\t\tlet h = trim(c[1]); let s = trim(c[3]); let l = trim(c[5]);\n\t\t\t\th = Math.max(Math.min(parseInt(trimpercent(h)), 360), 0) || 0;\n\t\t\t\tif (s.includes('%')) {\n\t\t\t\t\ts = Math.max(Math.min(100*(parseInt(trimpercent(s))/100), 100), 0) || 0;\n\t\t\t\t}\n\t\t\t\ts = Math.max(Math.min(s, 100), 0) || 0;\n\t\t\t\tif (l.includes('%')) {\n\t\t\t\t\tl = Math.max(Math.min(100*(parseInt(trimpercent(l))/100), 100), 0) || 0;\n\t\t\t\t}\n\t\t\t\tl = Math.max(Math.min(l, 100), 0) || 0;\n\t\t\t\thex = '#'+cc.hsl.hex(h, s, l);\n\t\t\t\tname = cc.hex.keyword(hex) || \"Unknown\";\n\t\t\t\tdecimal = `decimal(${parseInt(String(hex).replace('#',''), 16)})`; rgb = `rgb(${cc.hex.rgb(hex)})`; hsl = `hsl(${cc.hex.hsl(hex).join('%,').replace('%','')}%)`;\n\t\t\t\tcmyk = `cmyk(${cc.hex.cmyk(hex).join('%,')}%)`; hwb = `hwb(${cc.hex.hwb(hex).join('%,').replace('%','')}%)`; hsv = `hsv(${cc.hex.hsv(hex).join('%,').replace('%','')}%)`;\n\t\t\t\tCIElab = `lab(${cc.hex.lab(hex)})`; XYZ = `xyz(${cc.hex.xyz(hex)})`; apple = `apple(${cc.hex.apple(hex)})`;\n\t\t\t\t\n\t\t\t\tcolor = hex;\n\t\t\t} else if (color.match(HWBCheckerRegex)) {\n\t\t\t\tlet c = color.match(HWBCheckerRegex);\n\t\t\t\tlet h = trim(c[1]); let w = trim(c[3]); let b = trim(c[5]);\n\t\t\t\th = Math.max(Math.min(parseInt(trimpercent(h)), 360), 0) || 0;\n\t\t\t\tif (w.includes('%')) {\n\t\t\t\t\tw = Math.max(Math.min(100*(parseInt(trimpercent(w))/100), 100), 0) || 0;\n\t\t\t\t}\n\t\t\t\tw = Math.max(Math.min(w, 100), 0) || 0;\n\t\t\t\tif (b.includes('%')) {\n\t\t\t\t\tb = Math.max(Math.min(100*(parseInt(trimpercent(b))/100), 100), 0) || 0;\n\t\t\t\t}\n\t\t\t\tb = Math.max(Math.min(b, 100), 0) || 0;\n\t\t\t\thex = '#'+cc.hwb.hex(h, w, b);\n\t\t\t\tname = cc.hex.keyword(hex) || \"Unknown\";\n\t\t\t\tdecimal = `decimal(${parseInt(String(hex).replace('#',''), 16)})`; rgb = `rgb(${cc.hex.rgb(hex)})`; hsl = `hsl(${cc.hex.hsl(hex).join('%,').replace('%','')}%)`;\n\t\t\t\tcmyk = `cmyk(${cc.hex.cmyk(hex).join('%,')}%)`; hwb = `hwb(${cc.hex.hwb(hex).join('%,').replace('%','')}%)`; hsv = `hsv(${cc.hex.hsv(hex).join('%,').replace('%','')}%)`;\n\t\t\t\tCIElab = `lab(${cc.hex.lab(hex)})`; XYZ = `xyz(${cc.hex.xyz(hex)})`; apple = `apple(${cc.hex.apple(hex)})`;\n\t\t\t\t\n\t\t\t\tcolor = hex;\n\t\t\t} else if (color.match(CMYKCheckerRegex)) {\n\t\t\t\tlet col = color.match(CMYKCheckerRegex);\n\t\t\t\tlet c = trim(col[1]); let m = trim(col[3]); let y = trim(col[5]); let k = trim(col[7]);\n\t\t\t\tif (c.includes('%')) {\n\t\t\t\t\tc = Math.max(Math.min(100*(parseInt(trimpercent(c))/100), 100), 0) || 0;\n\t\t\t\t}\n\t\t\t\tc = Math.max(Math.min(c, 100), 0) || 0;\n\t\t\t\tif (m.includes('%')) {\n\t\t\t\t\tm = Math.max(Math.min(100*(parseInt(trimpercent(m))/100), 100), 0) || 0;\n\t\t\t\t}\n\t\t\t\tm = Math.max(Math.min(m, 100), 0) || 0;\n\t\t\t\tif (y.includes('%')) {\n\t\t\t\t\ty = Math.max(Math.min(100*(parseInt(trimpercent(y))/100), 100), 0) || 0;\n\t\t\t\t}\n\t\t\t\ty = Math.max(Math.min(y, 100), 0) || 0;\n\t\t\t\tif (k.includes('%')) {\n\t\t\t\t\tk = Math.max(Math.min(100*(parseInt(trimpercent(k))/100), 100), 0) || 0;\n\t\t\t\t}\n\t\t\t\tk = Math.max(Math.min(k, 100), 0) || 0;\n\t\t\t\thex = '#'+cc.cmyk.hex(c, m, y, k);\n\t\t\t\tname = cc.hex.keyword(hex) || \"Unknown\";\n\t\t\t\tdecimal = `decimal(${parseInt(String(hex).replace('#',''), 16)})`; rgb = `rgb(${cc.hex.rgb(hex)})`; hsl = `hsl(${cc.hex.hsl(hex).join('%,').replace('%','')}%)`;\n\t\t\t\tcmyk = `cmyk(${cc.hex.cmyk(hex).join('%,')}%)`; hwb = `hwb(${cc.hex.hwb(hex).join('%,').replace('%','')}%)`; hsv = `hsv(${cc.hex.hsv(hex).join('%,').replace('%','')}%)`;\n\t\t\t\tCIElab = `lab(${cc.hex.lab(hex)})`; XYZ = `xyz(${cc.hex.xyz(hex)})`; apple = `apple(${cc.hex.apple(hex)})`;\n\t\t\t\t\n\t\t\t\tcolor = hex;\n\t\t\t} else if (color.match(HSVCheckerRegex)) {\n\t\t\t\tlet c = color.match(HSVCheckerRegex);\n\t\t\t\tlet h = trim(c[1]); let s = trim(c[3]); let v = trim(c[5]);\n\t\t\t\th = Math.max(Math.min(parseInt(trimpercent(h)), 360), 0) || 0;\n\t\t\t\tif (s.includes('%')) {\n\t\t\t\t\ts = Math.max(Math.min(100*(parseInt(trimpercent(s))/100), 100), 0) || 0;\n\t\t\t\t}\n\t\t\t\ts = Math.max(Math.min(s, 100), 0) || 0;\n\t\t\t\tif (v.includes('%')) {\n\t\t\t\t\tv = Math.max(Math.min(100*(parseInt(trimpercent(v))/100), 100), 0) || 0;\n\t\t\t\t}\n\t\t\t\tv = Math.max(Math.min(v, 100), 0) || 0;\n\t\t\t\thex = '#'+cc.hsv.hex(h, s, v);\n\t\t\t\tname = cc.hex.keyword(hex) || \"Unknown\";\n\t\t\t\tdecimal = `decimal(${parseInt(String(hex).replace('#',''), 16)})`; rgb = `rgb(${cc.hex.rgb(hex)})`; hsl = `hsl(${cc.hex.hsl(hex).join('%,').replace('%','')}%)`;\n\t\t\t\tcmyk = `cmyk(${cc.hex.cmyk(hex).join('%,')}%)`; hwb = `hwb(${cc.hex.hwb(hex).join('%,').replace('%','')}%)`; hsv = `hsv(${cc.hex.hsv(hex).join('%,').replace('%','')}%)`;\n\t\t\t\tCIElab = `lab(${cc.hex.lab(hex)})`; XYZ = `xyz(${cc.hex.xyz(hex)})`; apple = `apple(${cc.hex.apple(hex)})`;\n\t\t\t\t\n\t\t\t\tcolor = hex;\n\t\t\t} else if (color.match(XYZCheckerRegex)) {\n\t\t\t\tlet c = color.match(XYZCheckerRegex);\n\t\t\t\tlet x = trim(c[1]); let y = trim(c[3]); let z = trim(c[5]);\n\t\t\t\tif (x.includes('%')) {\n\t\t\t\t\tx = Math.max(Math.min(95*(parseInt(trimpercent(x))/100), 95), 0) || 0;\n\t\t\t\t}\n\t\t\t\tx = Math.max(Math.min(x, 95), 0) || 0;\n\t\t\t\tif (y.includes('%')) {\n\t\t\t\t\ty = Math.max(Math.min(100*(parseInt(trimpercent(y))/100), 100), 0) || 0;\n\t\t\t\t}\n\t\t\t\ty = Math.max(Math.min(y, 100), 0) || 0;\n\t\t\t\tif (z.includes('%')) {\n\t\t\t\t\tz = Math.max(Math.min(109*(parseInt(trimpercent(z))/100), 109), 0) || 0;\n\t\t\t\t}\n\t\t\t\tz = Math.max(Math.min(z, 109), 0) || 0;\n\t\t\t\thex = '#'+cc.xyz.hex(x, y, z);\n\t\t\t\tname = cc.hex.keyword(hex) || \"Unknown\"; \n\t\t\t\tdecimal = `decimal(${parseInt(String(hex).replace('#',''), 16)})`; rgb = `rgb(${cc.hex.rgb(hex)})`; hsl = `hsl(${cc.hex.hsl(hex).join('%,').replace('%','')}%)`;\n\t\t\t\tcmyk = `cmyk(${cc.hex.cmyk(hex).join('%,')}%)`; hwb = `hwb(${cc.hex.hwb(hex).join('%,').replace('%','')}%)`; hsv = `hsv(${cc.hex.hsv(hex).join('%,').replace('%','')}%)`;\n\t\t\t\tCIElab = `lab(${cc.hex.lab(hex)})`; XYZ = `xyz(${cc.hex.xyz(hex)})`; apple = `apple(${cc.hex.apple(hex)})`;\n\t\t\t\t\n\t\t\t\tcolor = hex;\n\t\t\t} else if (color.match(CIElabCheckerRegex)) {\n\t\t\t\tlet c = color.match(CIElabCheckerRegex);\n\t\t\t\tlet l = trim(c[1]); let a = trim(c[3]); let b = trim(c[5]);\n\t\t\t\tif (l.includes('%')) {\n\t\t\t\t\tl = Math.max(Math.min(100*(parseInt(trimpercent(l))/100), 100), 0) || 0;\n\t\t\t\t}\n\t\t\t\tl = Math.max(Math.min(l, 100), 0) || 0;\n\t\t\t\tif (a.includes('%')) {\n\t\t\t\t\ta = Math.max(Math.min(139*(parseInt(trimpercent(a))/100), 139), 0) || 0;\n\t\t\t\t}\n\t\t\t\ta = Math.max(Math.min(a, 139), 0) || 0;\n\t\t\t\tif (b.includes('%')) {\n\t\t\t\t\tb = Math.max(Math.min(114*(parseInt(trimpercent(b))/100), 114), 0) || 0;\n\t\t\t\t}\n\t\t\t\tb = Math.max(Math.min(b, 114), 0) || 0;\n\t\t\t\thex = '#'+cc.xyz.hex(l, a, b);\n\t\t\t\tname = cc.hex.keyword(hex) || \"Unknown\"; \n\t\t\t\tdecimal = `decimal(${parseInt(String(hex).replace('#',''), 16)})`; rgb = `rgb(${cc.hex.rgb(hex)})`; hsl = `hsl(${cc.hex.hsl(hex).join('%,').replace('%','')}%)`;\n\t\t\t\tcmyk = `cmyk(${cc.hex.cmyk(hex).join('%,')}%)`; hwb = `hwb(${cc.hex.hwb(hex).join('%,').replace('%','')}%)`; hsv = `hsv(${cc.hex.hsv(hex).join('%,').replace('%','')}%)`;\n\t\t\t\tCIElab = `lab(${cc.hex.lab(hex)})`; XYZ = `xyz(${cc.hex.xyz(hex)})`; apple = `apple(${cc.hex.apple(hex)})`;\n\t\t\t\t\n\t\t\t\tcolor = hex;\n\t\t\t} else if (color.match(APPLECheckerRegex)) {\n\t\t\t\tlet c = color.match(APPLECheckerRegex);\n\t\t\t\tlet ap = trim(c[1]); let pl = trim(c[3]); let e = trim(c[5]); // idk. I tried to be creative\n\t\t\t\tif (ap.includes('%')) {\n\t\t\t\t\tap = Math.max(Math.min(65535*(parseInt(trimpercent(ap))/100), 65535), 0) || 0;\n\t\t\t\t}\n\t\t\t\tap = Math.max(Math.min(ap, 65535), 0) || 0;\n\t\t\t\tif (pl.includes('%')) {\n\t\t\t\t\tpl = Math.max(Math.min(65535*(parseInt(trimpercent(pl))/100), 65535), 0) || 0;\n\t\t\t\t}\n\t\t\t\tpl = Math.max(Math.min(pl, 65535), 0) || 0;\n\t\t\t\tif (e.includes('%')) {\n\t\t\t\t\te = Math.max(Math.min(65535*(parseInt(trimpercent(e))/100), 65535), 0) || 0;\n\t\t\t\t}\n\t\t\t\te = Math.max(Math.min(e, 65535), 0) || 0;\n\t\t\t\thex = '#'+cc.apple.hex(ap, pl, e);\n\t\t\t\tname = cc.hex.keyword(hex) || \"Unknown\"; \n\t\t\t\tdecimal = `decimal(${parseInt(String(hex).replace('#',''), 16)})`; rgb = `rgb(${cc.hex.rgb(hex)})`; hsl = `hsl(${cc.hex.hsl(hex).join('%,').replace('%','')}%)`;\n\t\t\t\tcmyk = `cmyk(${cc.hex.cmyk(hex).join('%,')}%)`; hwb = `hwb(${cc.hex.hwb(hex).join('%,').replace('%','')}%)`; hsv = `hsv(${cc.hex.hsv(hex).join('%,').replace('%','')}%)`;\n\t\t\t\tCIElab = `lab(${cc.hex.lab(hex)})`; XYZ = `xyz(${cc.hex.xyz(hex)})`; apple = `apple(${cc.hex.apple(hex)})`;\n\t\t\t\t\n\t\t\t\tcolor = hex;\n\t\t\t} else { // Not a valid format, so give the user a random color.\n\t\t\t\tinvalidcolor = true;\n\t\t\t\thex = '#'+Math.floor(Math.random()*16777215).toString(16); hex = HexColorCorrector(hex);\n\t\t\t\thex = `#${embed.color.toString(16)}`; name = cc.hex.keyword(hex) || \"Unknown\"; \n\t\t\t\tdecimal = `decimal(${embed.color})`; rgb = `rgb(${cc.hex.rgb(hex)})`; hsl = `hsl(${cc.hex.hsl(hex).join('%,').replace('%','')}%)`;\n\t\t\t\tcmyk = `cmyk(${cc.hex.cmyk(hex).join('%,')}%)`; hwb = `hwb(${cc.hex.hwb(hex).join('%,').replace('%','')}%)`; hsv = `hsv(${cc.hex.hsv(hex).join('%,').replace('%','')}%)`;\n\t\t\t\tCIElab = `lab(${cc.hex.lab(hex)})`; XYZ = `xyz(${cc.hex.xyz(hex)})`; apple = `apple(${cc.hex.apple(hex)})`;\n\t\t\t\t\n\t\t\t\tcolor = hex;\n\t\t\t}\n\t\t}\n\t\t\n\t\tctx.beginPath();\n\t\tctx.rect(1, 1, 100, 100);\n\t\tctx.fillStyle = hex;\n\t\tctx.fill();\n\t\tattachment = new Discord.Attachment(canvas.toBuffer(), `Color_${nickname}.png`);\n\t}\n\t\n\tcolor = String(color).replace(/#/g, '');\n\tcolor = String(color).replace(/0x/g, '');\n\thex = '#'+color;\n\tformats = `\\`\\`\\`nimrod\nName: ${CGs_colors[colorpermanent] ? colorpermanent : name}\\tDecimal: ${decimal}\\tHex: ${hex}\nRGB: ${rgb}\\t\\tHSL: ${hsl}\nHWB: ${hwb}\\t\\tHSV: ${hsv}\nXYZ: ${XYZ}\\t\\tCIElab: ${CIElab}\nCMYK: ${cmyk}\\t\\tApple: ${apple}\\`\\`\\``;\n\tif (invalidcolor == true) {\n\t\tformats = \"Invalid color code. Random one assigned: \\n\" + formats;\n\t}\n\tif (embedtwo.description) {\n\t\tmsg.channel.send(embedtwo);\n\t} else {\n\t\tmsg.channel.send({\n\t\t\tembed: {\n\t\t\t\tdescription: formats,\n\t\t\t\tcolor: embed.color\n\t\t\t},\n\t\t\tfiles: [{\n\t\t\t\tattachment: canvas.toBuffer(),\n\t\t\t\tname: 'file.jpg'\n\t\t\t}]\n\t\t});\n\t}\n}\n\nasyncCall();",
      "storage": "0",
      "varName": "",
      "name": "Run Script"
    }
  ]
}
